import{u as h,a as m,e as R,b,c as d,s as C,f as p,g as Q,w as O,Q as E}from"./suspense-d-BcEOpp.js";import{f as q,r as a,z as w,B as y,ag as S}from"./index-BwfLVWqJ.js";function x(n,i,B){const o=h(),u=m(),s=q(),e=s.defaultQueryOptions(n);s.getDefaultOptions().queries?._experimental_beforeQuery?.(e),e._optimisticResults=o?"isRestoring":"optimistic",R(e),b(e,u),d(u);const f=!s.getQueryCache().get(e.queryHash),[r]=a.useState(()=>new i(s,e)),t=r.getOptimisticResult(e),c=!o&&n.subscribed!==!1;if(a.useSyncExternalStore(a.useCallback(l=>{const g=c?r.subscribe(w.batchCalls(l)):y;return r.updateResult(),g},[r,c]),()=>r.getCurrentResult(),()=>r.getCurrentResult()),a.useEffect(()=>{r.setOptions(e)},[e,r]),C(e,t))throw p(e,r,u);if(Q({result:t,errorResetBoundary:u,throwOnError:e.throwOnError,query:s.getQueryCache().get(e.queryHash),suspense:e.suspense}))throw t.error;return s.getDefaultOptions().queries?._experimental_afterQuery?.(e,t),e.experimental_prefetchInRender&&!S&&O(t,o)&&(f?p(e,r,u):s.getQueryCache().get(e.queryHash)?.promise)?.catch(y).finally(()=>{r.updateResult()}),e.notifyOnChangeProps?t:r.trackResult(t)}function H(n,i){return x(n,E)}export{H as u};
